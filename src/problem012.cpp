/*
* File: Problem012.cpp
* Author: Gary Hubley
* Company: Self
* Description:
*		This is my attempt at problem012 from projecteuler.com
*
* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
* 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
*
* 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*
* Let us list the factors of the first seven triangle numbers:
*
*   1: 1
*   3: 1,3
*   6: 1,2,3,6
*   10: 1,2,5,10
*   15: 1,3,5,15
*   21: 1,3,7,21
*   28: 1,2,4,7,14,28
*   We can see that 28 is the first triangle number to have over five divisors.
*
* What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <vector>
#include "EulerLib.h"
#include <tuple>

void problem012()
{
	uint64_t num_divisors = 1;
	uint32_t triangle_num = 0;
	std::vector<uint64_t> primes 
		= primeEratosthenes(
				static_cast<uint32_t>(
					sqrt(std::numeric_limits<uint32_t>::max())
					)
				);
	for (uint32_t n = 1; num_divisors < 500; n++ ) {
		triangle_num += n;
		num_divisors = 1;
		std::vector<std::tuple<uint64_t, uint64_t>> prime_factors 
			= PrimeFactorization(triangle_num, primes);

		for (uint32_t i = 0; i < prime_factors.size(); i++)
		{
			num_divisors *= std::get<1>(prime_factors.at(i)) + 1;
		}
	}
	std::cout << "Answer: " << triangle_num << std::endl;
}



