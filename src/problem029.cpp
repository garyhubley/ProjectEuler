/*
 * File: Problem029.cpp
 * Author: Gary Hubley
 * Company: Self
 * Description:
 *   Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 *  
 *     2^2=4, 2^3=8, 2^4=16, 2^5=32
 *     3^2=9, 3^3=27, 3^4=81, 3^5=243
 *     4^2=16, 4^3=64, 4^4=256, 4^5=1024
 *     5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *  
 *   If they are then placed in numerical order, with any repeats removed, we get
 *   the following sequence of 15 distinct terms:
 *  
 *     4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *  
 *   How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100
 *   and 2 ≤ b ≤ 100?
 */

#include "EulerLib.h"

#include <iostream>
#include <chrono>

typedef std::chrono::high_resolution_clock Clock;
#define ToSeconds(x) (std::chrono::duration_cast<std::chrono::seconds>(x))
#define ToMilliSeconds(x) (std::chrono::duration_cast<std::chrono::milliseconds>(x))

typedef std::vector<std::tuple<uint64_t, uint64_t>> PrimeFactor;

bool isUnique(const std::vector<PrimeFactor> &uniques, const PrimeFactor &primeFactors) {
    auto primeFactorsSize = primeFactors.size();

    for (const auto &uniquePrimeFactors : uniques) {
        if (uniquePrimeFactors.size() != primeFactorsSize) {
            // obviously different if number of factors is different
            continue;
        }
        size_t factor;
        for (factor = 0; factor < primeFactorsSize; factor++) {
            if (uniquePrimeFactors[factor] != primeFactors[factor]) {
                // not the same, next unique
                break;
            }
        }
        if (factor == primeFactorsSize) {
            return false;
        }
    }
    return true;
}

void problem029() {
    const int upperBound = 100;
    const int lowerBound = 2;
    std::vector<PrimeFactor> uniques;

    auto start = Clock::now();

    // Get all primes under 101. Since I don't have this hard coded, I timed it.
    // Testing once with it outside saved ~300ms
    auto primes = primeEratosthenes(upperBound + 1);

    // iterate through each base
    for (uint32_t base = lowerBound; base <= upperBound; base++) {
        // break the base into prime factors
        auto basePrimeFactors = PrimeFactorization(base, primes);

        // iterate through exponents
        for (uint32_t exponent = lowerBound; exponent <= upperBound; exponent++) {
            auto primeFactors = basePrimeFactors;

            // Use exponent power rule to get prime factorization of product
            // ex (2^2)^4 = 2^8
            for (auto &factor : primeFactors) {
                std::get<1>(factor) = std::get<1>(factor) * exponent;
            }

            if (isUnique(uniques, primeFactors)) {
                uniques.push_back(primeFactors);
            }
        }
    }

    auto end = Clock::now();

    std::cout << "Answer: " << uniques.size() << std::endl;
    std::cout << "Time: " << ToMilliSeconds(end - start).count() << " milliseconds" << std::endl;
}
